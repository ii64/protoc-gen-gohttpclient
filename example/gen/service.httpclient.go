// Code generated by protoc-gen-gohttpclient v1.0.0. DO NOT EDIT.
// source: service.proto

package gen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	errors "github.com/pkg/errors"
	grpc "google.golang.org/grpc"
	protojson "google.golang.org/protobuf/encoding/protojson"
	ioutil "io/ioutil"
	mime "mime"
	http "net/http"
	strconv "strconv"
)

var (
	ErrMethodHasNoHTTPClientSupport = errors.New("no google.api.http option for this method")
)

// GreetServiceHTTPClient is the http client.
type GreetServiceHTTPClient struct {
	baseURL string
	client  *http.Client
}

// NewGreetServiceHTTPClient returns GreetServiceHTTPClient
func NewGreetServiceHTTPClient(baseURL string, client *http.Client) *GreetServiceHTTPClient {
	if client == nil {
		client = http.DefaultClient
	}
	return &GreetServiceHTTPClient{
		baseURL: baseURL,
		client:  client,
	}
}

// GetPost returns GetPostResponse
func (c *GreetServiceHTTPClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (out *GetPostResponse, err error) {
	// main.pathTerm{term:main.termVal{fieldName:"id", injectPoint:[]string{"", ""}, raw:"*"}}
	var f1 string
	if in != nil {
		// Int64Kind | <nil>
		tm0 := strconv.FormatInt(in.Id, 10)
		f1 = tm0
	}
	var req *http.Request
	req, err = http.NewRequest("GET", c.baseURL+"/posts/"+f1, nil)
	if err != nil {
		return
	}
	req = req.WithContext(ctx)
	var res *http.Response
	if res, err = c.client.Do(req); err != nil {
		return
	}
	defer res.Body.Close()
	var rs GetPostResponse
	var body []byte
	if body, err = ioutil.ReadAll(res.Body); err != nil {
		return
	}
	switch ct, _, _ := mime.ParseMediaType(res.Header.Get("Content-Type")); ct {
	case "application/protobuf", "application/x-protobuf":
		if err = proto.Unmarshal(body, &rs); err != nil {
			return
		}
	case "application/json":
		if err = protojson.Unmarshal(body, &rs); err != nil {
			return
		}
	default:
		return nil, fmt.Errorf("unknown response content type %q", ct)
	}
	return &rs, nil
}
