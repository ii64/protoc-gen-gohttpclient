// Code generated by protoc-gen-gohttpclient v1.1.0. DO NOT EDIT.
// source: service.proto

package gen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	errors "github.com/pkg/errors"
	grpc "google.golang.org/grpc"
	protojson "google.golang.org/protobuf/encoding/protojson"
	ioutil "io/ioutil"
	mime "mime"
	http "net/http"
	url "net/url"
	strconv "strconv"
)

var (
	ErrMethodHasNoHTTPClientSupport = errors.New("no google.api.http option for this method")
)

// GreetServiceHTTPClient is the http client.
type GreetServiceHTTPClient struct {
	baseURL string
	client  *http.Client
}

// NewGreetServiceHTTPClient returns GreetServiceHTTPClient
func NewGreetServiceHTTPClient(baseURL string, client *http.Client) *GreetServiceHTTPClient {
	if client == nil {
		client = http.DefaultClient
	}
	return &GreetServiceHTTPClient{
		baseURL: baseURL,
		client:  client,
	}
}

// GetPost returns GetPostResponse
func (c *GreetServiceHTTPClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (out *GetPostResponse, err error) {
	// main.pathTerm{term:main.termVal{fieldName:"id", injectPoint:[]string(nil), raw:"id"}}
	var f1 string
	if in != nil {
		// Int64Kind | <nil>
		f1 = strconv.FormatInt(in.Id, 10)
	}
	var req *http.Request
	req, err = http.NewRequest("GET", c.baseURL+"/posts/"+f1, nil)
	if err != nil {
		return
	}
	req.URL.RawQuery = in.QueryString().Encode()
	req = req.WithContext(ctx)
	var res *http.Response
	if res, err = c.client.Do(req); err != nil {
		return
	}
	defer res.Body.Close()
	var rs GetPostResponse
	var body []byte
	if body, err = ioutil.ReadAll(res.Body); err != nil {
		return
	}
	switch ct, _, _ := mime.ParseMediaType(res.Header.Get("Content-Type")); ct {
	case "application/protobuf", "application/x-protobuf":
		if err = proto.Unmarshal(body, &rs); err != nil {
			return
		}
	case "application/json":
		if err = protojson.Unmarshal(body, &rs); err != nil {
			return
		}
	default:
		return nil, fmt.Errorf("unknown response content type %q", ct)
	}
	return &rs, nil
}

// QueryString returns http url.Values of GetPostRequest
func (u *GetPostRequest) QueryString() url.Values {
	var q = url.Values{}
	q.Set("id", strconv.FormatInt(u.Id, 10))
	q.Set("s", u.S)
	if u.J != nil {
		if u.J.C != nil {
			q.Set("j.c.k", strconv.FormatInt(int64(u.J.C.K), 10))
			q.Set("j.c.heu", u.J.C.Heu)
		}
		q.Set("j.sd", u.J.Sd)
	}
	tm0 := "false"
	if u.Latest {
		tm0 = "true"
	}
	q.Set("latest", tm0)
	return q
}

// QueryString returns http url.Values of GetPostResponse
func (u *GetPostResponse) QueryString() url.Values {
	var q = url.Values{}
	q.Set("userId", strconv.FormatInt(u.UserId, 10))
	q.Set("id", strconv.FormatInt(u.Id, 10))
	q.Set("title", u.Title)
	q.Set("body", u.Body)
	if u.Req != nil {
		q.Set("req.id", strconv.FormatInt(u.Req.Id, 10))
		q.Set("req.s", u.Req.S)
		if u.Req.J != nil {
			if u.Req.J.C != nil {
				q.Set("req.j.c.k", strconv.FormatInt(int64(u.Req.J.C.K), 10))
				q.Set("req.j.c.heu", u.Req.J.C.Heu)
			}
			q.Set("req.j.sd", u.Req.J.Sd)
		}
		tm0 := "false"
		if u.Req.Latest {
			tm0 = "true"
		}
		q.Set("req.latest", tm0)
	}
	if u.T != nil {
		if u.T.C != nil {
			q.Set("t.c.k", strconv.FormatInt(int64(u.T.C.K), 10))
			q.Set("t.c.heu", u.T.C.Heu)
		}
		q.Set("t.sd", u.T.Sd)
	}
	tm1 := "false"
	if u.Latest {
		tm1 = "true"
	}
	q.Set("latest", tm1)
	return q
}

// QueryString returns http url.Values of Nest
func (u *Nest) QueryString() url.Values {
	var q = url.Values{}
	if u.C != nil {
		q.Set("c.k", strconv.FormatInt(int64(u.C.K), 10))
		q.Set("c.heu", u.C.Heu)
	}
	q.Set("sd", u.Sd)
	return q
}

// QueryString returns http url.Values of Nest2
func (u *Nest2) QueryString() url.Values {
	var q = url.Values{}
	q.Set("k", strconv.FormatInt(int64(u.K), 10))
	q.Set("heu", u.Heu)
	return q
}
