// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: service.proto

package gen

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
type ContentSource int32

const (
	ContentSource_UNKNOWN ContentSource = 0
	ContentSource_CACHE   ContentSource = 1
	ContentSource_EDGE    ContentSource = 2
)

// Enum value maps for ContentSource.
var (
	ContentSource_name = map[int32]string{
		0: "UNKNOWN",
		1: "CACHE",
		2: "EDGE",
	}
	ContentSource_value = map[string]int32{
		"UNKNOWN": 0,
		"CACHE":   1,
		"EDGE":    2,
	}
)

func (x ContentSource) Enum() *ContentSource {
	p := new(ContentSource)
	*p = x
	return p
}

func (x ContentSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentSource) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (ContentSource) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x ContentSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentSource.Descriptor instead.
func (ContentSource) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

//
type KitsuAnimeImageDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *KitsuAnimeImageDimension) Reset() {
	*x = KitsuAnimeImageDimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeImageDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeImageDimension) ProtoMessage() {}

func (x *KitsuAnimeImageDimension) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeImageDimension.ProtoReflect.Descriptor instead.
func (*KitsuAnimeImageDimension) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *KitsuAnimeImageDimension) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *KitsuAnimeImageDimension) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type KitsuAnimeImageMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimensions map[string]*KitsuAnimeImageDimension `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KitsuAnimeImageMeta) Reset() {
	*x = KitsuAnimeImageMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeImageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeImageMeta) ProtoMessage() {}

func (x *KitsuAnimeImageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeImageMeta.ProtoReflect.Descriptor instead.
func (*KitsuAnimeImageMeta) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *KitsuAnimeImageMeta) GetDimensions() map[string]*KitsuAnimeImageDimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type KitsuAnimeImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tiny     string               `protobuf:"bytes,1,opt,name=tiny,proto3" json:"tiny,omitempty"`
	Small    string               `protobuf:"bytes,2,opt,name=small,proto3" json:"small,omitempty"`
	Medium   string               `protobuf:"bytes,3,opt,name=medium,proto3" json:"medium,omitempty"`
	Large    string               `protobuf:"bytes,4,opt,name=large,proto3" json:"large,omitempty"`
	Original string               `protobuf:"bytes,5,opt,name=original,proto3" json:"original,omitempty"`
	Meta     *KitsuAnimeImageMeta `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *KitsuAnimeImage) Reset() {
	*x = KitsuAnimeImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeImage) ProtoMessage() {}

func (x *KitsuAnimeImage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeImage.ProtoReflect.Descriptor instead.
func (*KitsuAnimeImage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *KitsuAnimeImage) GetTiny() string {
	if x != nil {
		return x.Tiny
	}
	return ""
}

func (x *KitsuAnimeImage) GetSmall() string {
	if x != nil {
		return x.Small
	}
	return ""
}

func (x *KitsuAnimeImage) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *KitsuAnimeImage) GetLarge() string {
	if x != nil {
		return x.Large
	}
	return ""
}

func (x *KitsuAnimeImage) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *KitsuAnimeImage) GetMeta() *KitsuAnimeImageMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type KitsuAnimeAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt           string            `protobuf:"bytes,1,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           string            `protobuf:"bytes,2,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Slug                string            `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Synopsis            string            `protobuf:"bytes,4,opt,name=synopsis,proto3" json:"synopsis,omitempty"`
	Description         string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	CoverImageTopOffset int32             `protobuf:"varint,6,opt,name=coverImageTopOffset,proto3" json:"coverImageTopOffset,omitempty"`
	Titles              map[string]string `protobuf:"bytes,7,rep,name=titles,proto3" json:"titles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CanonicalTitle      string            `protobuf:"bytes,8,opt,name=canonicalTitle,proto3" json:"canonicalTitle,omitempty"`
	AbbreviatedTitles   []string          `protobuf:"bytes,9,rep,name=abbreviatedTitles,proto3" json:"abbreviatedTitles,omitempty"`
	AverageRating       string            `protobuf:"bytes,10,opt,name=averageRating,proto3" json:"averageRating,omitempty"`
	RatingFrequencies   map[string]string `protobuf:"bytes,11,rep,name=ratingFrequencies,proto3" json:"ratingFrequencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserCount           int64             `protobuf:"varint,12,opt,name=userCount,proto3" json:"userCount,omitempty"`
	FavoritesCount      int64             `protobuf:"varint,13,opt,name=favoritesCount,proto3" json:"favoritesCount,omitempty"`
	StartDate           string            `protobuf:"bytes,14,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate             string            `protobuf:"bytes,15,opt,name=endDate,proto3" json:"endDate,omitempty"`
	NextRelease         string            `protobuf:"bytes,16,opt,name=nextRelease,proto3" json:"nextRelease,omitempty"`
	PopularityRank      int32             `protobuf:"varint,17,opt,name=popularityRank,proto3" json:"popularityRank,omitempty"`
	RatingRank          int32             `protobuf:"varint,18,opt,name=ratingRank,proto3" json:"ratingRank,omitempty"`
	AgeRating           string            `protobuf:"bytes,19,opt,name=ageRating,proto3" json:"ageRating,omitempty"`
	AgeRatingGuide      string            `protobuf:"bytes,20,opt,name=ageRatingGuide,proto3" json:"ageRatingGuide,omitempty"`
	Subtype             string            `protobuf:"bytes,21,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Status              string            `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`
	Tba                 string            `protobuf:"bytes,23,opt,name=tba,proto3" json:"tba,omitempty"` // i think orig: null
	PosterImage         *KitsuAnimeImage  `protobuf:"bytes,24,opt,name=posterImage,proto3" json:"posterImage,omitempty"`
	CoverImage          *KitsuAnimeImage  `protobuf:"bytes,25,opt,name=coverImage,proto3" json:"coverImage,omitempty"`
	EpisodeCount        int32             `protobuf:"varint,26,opt,name=episodeCount,proto3" json:"episodeCount,omitempty"`
	EpisodeLength       int32             `protobuf:"varint,27,opt,name=episodeLength,proto3" json:"episodeLength,omitempty"`
	TotalLength         int32             `protobuf:"varint,28,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	YoutubeVideoId      string            `protobuf:"bytes,29,opt,name=youtubeVideoId,proto3" json:"youtubeVideoId,omitempty"`
	ShowType            string            `protobuf:"bytes,30,opt,name=showType,proto3" json:"showType,omitempty"`
	Nsfw                bool              `protobuf:"varint,31,opt,name=nsfw,proto3" json:"nsfw,omitempty"`
}

func (x *KitsuAnimeAttributes) Reset() {
	*x = KitsuAnimeAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeAttributes) ProtoMessage() {}

func (x *KitsuAnimeAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeAttributes.ProtoReflect.Descriptor instead.
func (*KitsuAnimeAttributes) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *KitsuAnimeAttributes) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetSynopsis() string {
	if x != nil {
		return x.Synopsis
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetCoverImageTopOffset() int32 {
	if x != nil {
		return x.CoverImageTopOffset
	}
	return 0
}

func (x *KitsuAnimeAttributes) GetTitles() map[string]string {
	if x != nil {
		return x.Titles
	}
	return nil
}

func (x *KitsuAnimeAttributes) GetCanonicalTitle() string {
	if x != nil {
		return x.CanonicalTitle
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetAbbreviatedTitles() []string {
	if x != nil {
		return x.AbbreviatedTitles
	}
	return nil
}

func (x *KitsuAnimeAttributes) GetAverageRating() string {
	if x != nil {
		return x.AverageRating
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetRatingFrequencies() map[string]string {
	if x != nil {
		return x.RatingFrequencies
	}
	return nil
}

func (x *KitsuAnimeAttributes) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *KitsuAnimeAttributes) GetFavoritesCount() int64 {
	if x != nil {
		return x.FavoritesCount
	}
	return 0
}

func (x *KitsuAnimeAttributes) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetNextRelease() string {
	if x != nil {
		return x.NextRelease
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetPopularityRank() int32 {
	if x != nil {
		return x.PopularityRank
	}
	return 0
}

func (x *KitsuAnimeAttributes) GetRatingRank() int32 {
	if x != nil {
		return x.RatingRank
	}
	return 0
}

func (x *KitsuAnimeAttributes) GetAgeRating() string {
	if x != nil {
		return x.AgeRating
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetAgeRatingGuide() string {
	if x != nil {
		return x.AgeRatingGuide
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetTba() string {
	if x != nil {
		return x.Tba
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetPosterImage() *KitsuAnimeImage {
	if x != nil {
		return x.PosterImage
	}
	return nil
}

func (x *KitsuAnimeAttributes) GetCoverImage() *KitsuAnimeImage {
	if x != nil {
		return x.CoverImage
	}
	return nil
}

func (x *KitsuAnimeAttributes) GetEpisodeCount() int32 {
	if x != nil {
		return x.EpisodeCount
	}
	return 0
}

func (x *KitsuAnimeAttributes) GetEpisodeLength() int32 {
	if x != nil {
		return x.EpisodeLength
	}
	return 0
}

func (x *KitsuAnimeAttributes) GetTotalLength() int32 {
	if x != nil {
		return x.TotalLength
	}
	return 0
}

func (x *KitsuAnimeAttributes) GetYoutubeVideoId() string {
	if x != nil {
		return x.YoutubeVideoId
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetShowType() string {
	if x != nil {
		return x.ShowType
	}
	return ""
}

func (x *KitsuAnimeAttributes) GetNsfw() bool {
	if x != nil {
		return x.Nsfw
	}
	return false
}

type KitsuAnimeLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Self    string `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	Related string `protobuf:"bytes,2,opt,name=related,proto3" json:"related,omitempty"`
	Next    string `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
	Last    string `protobuf:"bytes,4,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *KitsuAnimeLinks) Reset() {
	*x = KitsuAnimeLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeLinks) ProtoMessage() {}

func (x *KitsuAnimeLinks) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeLinks.ProtoReflect.Descriptor instead.
func (*KitsuAnimeLinks) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *KitsuAnimeLinks) GetSelf() string {
	if x != nil {
		return x.Self
	}
	return ""
}

func (x *KitsuAnimeLinks) GetRelated() string {
	if x != nil {
		return x.Related
	}
	return ""
}

func (x *KitsuAnimeLinks) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *KitsuAnimeLinks) GetLast() string {
	if x != nil {
		return x.Last
	}
	return ""
}

type KitsuAnimeRelationKitsuAnimeItemItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links *KitsuAnimeLinks `protobuf:"bytes,1,opt,name=links,proto3" json:"links,omitempty"`
}

func (x *KitsuAnimeRelationKitsuAnimeItemItem) Reset() {
	*x = KitsuAnimeRelationKitsuAnimeItemItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeRelationKitsuAnimeItemItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeRelationKitsuAnimeItemItem) ProtoMessage() {}

func (x *KitsuAnimeRelationKitsuAnimeItemItem) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeRelationKitsuAnimeItemItem.ProtoReflect.Descriptor instead.
func (*KitsuAnimeRelationKitsuAnimeItemItem) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *KitsuAnimeRelationKitsuAnimeItemItem) GetLinks() *KitsuAnimeLinks {
	if x != nil {
		return x.Links
	}
	return nil
}

type KitsuAnimeRelationships struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genres             *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,1,opt,name=genres,proto3" json:"genres,omitempty"`
	Categories         *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,2,opt,name=categories,proto3" json:"categories,omitempty"`
	Castings           *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,3,opt,name=castings,proto3" json:"castings,omitempty"`
	Installments       *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,4,opt,name=installments,proto3" json:"installments,omitempty"`
	Mappings           *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,5,opt,name=mappings,proto3" json:"mappings,omitempty"`
	Reviews            *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,6,opt,name=reviews,proto3" json:"reviews,omitempty"`
	MediaRelationships *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,7,opt,name=mediaRelationships,proto3" json:"mediaRelationships,omitempty"`
	Characters         *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,8,opt,name=characters,proto3" json:"characters,omitempty"`
	Staff              *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,9,opt,name=staff,proto3" json:"staff,omitempty"`
	Productions        *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,10,opt,name=productions,proto3" json:"productions,omitempty"`
	Quotes             *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,11,opt,name=quotes,proto3" json:"quotes,omitempty"`
	Episodes           *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,12,opt,name=episodes,proto3" json:"episodes,omitempty"`
	StreamingLinks     *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,13,opt,name=streamingLinks,proto3" json:"streamingLinks,omitempty"`
	AnimeProductions   *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,14,opt,name=animeProductions,proto3" json:"animeProductions,omitempty"`
	AnimeCharacters    *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,15,opt,name=animeCharacters,proto3" json:"animeCharacters,omitempty"`
	AnimeStaff         *KitsuAnimeRelationKitsuAnimeItemItem `protobuf:"bytes,16,opt,name=animeStaff,proto3" json:"animeStaff,omitempty"`
}

func (x *KitsuAnimeRelationships) Reset() {
	*x = KitsuAnimeRelationships{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeRelationships) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeRelationships) ProtoMessage() {}

func (x *KitsuAnimeRelationships) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeRelationships.ProtoReflect.Descriptor instead.
func (*KitsuAnimeRelationships) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *KitsuAnimeRelationships) GetGenres() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetCategories() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetCastings() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Castings
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetInstallments() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Installments
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetMappings() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetReviews() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetMediaRelationships() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.MediaRelationships
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetCharacters() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetStaff() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetProductions() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Productions
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetQuotes() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Quotes
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetEpisodes() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetStreamingLinks() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.StreamingLinks
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetAnimeProductions() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.AnimeProductions
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetAnimeCharacters() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.AnimeCharacters
	}
	return nil
}

func (x *KitsuAnimeRelationships) GetAnimeStaff() *KitsuAnimeRelationKitsuAnimeItemItem {
	if x != nil {
		return x.AnimeStaff
	}
	return nil
}

type KitsuAnimeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Links         *KitsuAnimeLinks         `protobuf:"bytes,3,opt,name=links,proto3" json:"links,omitempty"`
	Attributes    *KitsuAnimeAttributes    `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Relationships *KitsuAnimeRelationships `protobuf:"bytes,5,opt,name=relationships,proto3" json:"relationships,omitempty"`
}

func (x *KitsuAnimeItem) Reset() {
	*x = KitsuAnimeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeItem) ProtoMessage() {}

func (x *KitsuAnimeItem) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeItem.ProtoReflect.Descriptor instead.
func (*KitsuAnimeItem) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *KitsuAnimeItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KitsuAnimeItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KitsuAnimeItem) GetLinks() *KitsuAnimeLinks {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *KitsuAnimeItem) GetAttributes() *KitsuAnimeAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *KitsuAnimeItem) GetRelationships() *KitsuAnimeRelationships {
	if x != nil {
		return x.Relationships
	}
	return nil
}

type KitsuAnimeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// page[limit], page[offset]
	Page map[string]string `protobuf:"bytes,1,rep,name=page,proto3" json:"page,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KitsuAnimeListRequest) Reset() {
	*x = KitsuAnimeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeListRequest) ProtoMessage() {}

func (x *KitsuAnimeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeListRequest.ProtoReflect.Descriptor instead.
func (*KitsuAnimeListRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *KitsuAnimeListRequest) GetPage() map[string]string {
	if x != nil {
		return x.Page
	}
	return nil
}

type KitsuAnimeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentSource ContentSource     `protobuf:"varint,1,opt,name=contentSource,proto3,enum=myservice.ContentSource" json:"contentSource,omitempty"` //
	Data          []*KitsuAnimeItem `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *KitsuAnimeListResponse) Reset() {
	*x = KitsuAnimeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeListResponse) ProtoMessage() {}

func (x *KitsuAnimeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeListResponse.ProtoReflect.Descriptor instead.
func (*KitsuAnimeListResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *KitsuAnimeListResponse) GetContentSource() ContentSource {
	if x != nil {
		return x.ContentSource
	}
	return ContentSource_UNKNOWN
}

func (x *KitsuAnimeListResponse) GetData() []*KitsuAnimeItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type KitsuAnimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KitsuAnimeRequest) Reset() {
	*x = KitsuAnimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeRequest) ProtoMessage() {}

func (x *KitsuAnimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeRequest.ProtoReflect.Descriptor instead.
func (*KitsuAnimeRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *KitsuAnimeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type KitsuAnimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentSource ContentSource   `protobuf:"varint,1,opt,name=contentSource,proto3,enum=myservice.ContentSource" json:"contentSource,omitempty"` //
	Data          *KitsuAnimeItem `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KitsuAnimeResponse) Reset() {
	*x = KitsuAnimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KitsuAnimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KitsuAnimeResponse) ProtoMessage() {}

func (x *KitsuAnimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KitsuAnimeResponse.ProtoReflect.Descriptor instead.
func (*KitsuAnimeResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *KitsuAnimeResponse) GetContentSource() ContentSource {
	if x != nil {
		return x.ContentSource
	}
	return ContentSource_UNKNOWN
}

func (x *KitsuAnimeResponse) GetData() *KitsuAnimeItem {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x18, 0x4b, 0x69, 0x74, 0x73,
	0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0a, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x62, 0x0a, 0x0f, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9,
	0x01, 0x0a, 0x0f, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xae, 0x0a, 0x0a, 0x14, 0x4b,
	0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x62, 0x62,
	0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x11, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73,
	0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x62,
	0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x62, 0x61, 0x12, 0x3c, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69,
	0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x66, 0x77, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x73, 0x66, 0x77, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x0f, 0x4b,
	0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65,
	0x6c, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x61, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x24, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xb1,
	0x0a, 0x0a, 0x17, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e,
	0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x53, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x5f,
	0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e,
	0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x4f, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73,
	0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69,
	0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d,
	0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e,
	0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x57, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73,
	0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69,
	0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x22, 0xf1, 0x01, 0x0a, 0x0e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73,
	0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x4b, 0x69, 0x74, 0x73, 0x75,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x1a, 0x37, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x4b, 0x69,
	0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b,
	0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x11, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x4b, 0x69, 0x74,
	0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x31,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x44, 0x47, 0x45, 0x10,
	0x02, 0x32, 0xe3, 0x01, 0x0a, 0x0c, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6c, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b,
	0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12,
	0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x12, 0x65, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x6d,
	0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x79, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x74, 0x73, 0x75, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x69, 0x36, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x68, 0x74, 0x74, 0x70, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x3b, 0x67,
	0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_service_proto_goTypes = []interface{}{
	(ContentSource)(0),                           // 0: myservice.ContentSource
	(*KitsuAnimeImageDimension)(nil),             // 1: myservice.KitsuAnimeImageDimension
	(*KitsuAnimeImageMeta)(nil),                  // 2: myservice.KitsuAnimeImageMeta
	(*KitsuAnimeImage)(nil),                      // 3: myservice.KitsuAnimeImage
	(*KitsuAnimeAttributes)(nil),                 // 4: myservice.KitsuAnimeAttributes
	(*KitsuAnimeLinks)(nil),                      // 5: myservice.KitsuAnimeLinks
	(*KitsuAnimeRelationKitsuAnimeItemItem)(nil), // 6: myservice.KitsuAnimeRelationKitsuAnimeItemItem
	(*KitsuAnimeRelationships)(nil),              // 7: myservice.KitsuAnimeRelationships
	(*KitsuAnimeItem)(nil),                       // 8: myservice.KitsuAnimeItem
	(*KitsuAnimeListRequest)(nil),                // 9: myservice.KitsuAnimeListRequest
	(*KitsuAnimeListResponse)(nil),               // 10: myservice.KitsuAnimeListResponse
	(*KitsuAnimeRequest)(nil),                    // 11: myservice.KitsuAnimeRequest
	(*KitsuAnimeResponse)(nil),                   // 12: myservice.KitsuAnimeResponse
	nil,                                          // 13: myservice.KitsuAnimeImageMeta.DimensionsEntry
	nil,                                          // 14: myservice.KitsuAnimeAttributes.TitlesEntry
	nil,                                          // 15: myservice.KitsuAnimeAttributes.RatingFrequenciesEntry
	nil,                                          // 16: myservice.KitsuAnimeListRequest.PageEntry
}
var file_service_proto_depIdxs = []int32{
	13, // 0: myservice.KitsuAnimeImageMeta.dimensions:type_name -> myservice.KitsuAnimeImageMeta.DimensionsEntry
	2,  // 1: myservice.KitsuAnimeImage.meta:type_name -> myservice.KitsuAnimeImageMeta
	14, // 2: myservice.KitsuAnimeAttributes.titles:type_name -> myservice.KitsuAnimeAttributes.TitlesEntry
	15, // 3: myservice.KitsuAnimeAttributes.ratingFrequencies:type_name -> myservice.KitsuAnimeAttributes.RatingFrequenciesEntry
	3,  // 4: myservice.KitsuAnimeAttributes.posterImage:type_name -> myservice.KitsuAnimeImage
	3,  // 5: myservice.KitsuAnimeAttributes.coverImage:type_name -> myservice.KitsuAnimeImage
	5,  // 6: myservice.KitsuAnimeRelationKitsuAnimeItemItem.links:type_name -> myservice.KitsuAnimeLinks
	6,  // 7: myservice.KitsuAnimeRelationships.genres:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 8: myservice.KitsuAnimeRelationships.categories:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 9: myservice.KitsuAnimeRelationships.castings:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 10: myservice.KitsuAnimeRelationships.installments:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 11: myservice.KitsuAnimeRelationships.mappings:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 12: myservice.KitsuAnimeRelationships.reviews:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 13: myservice.KitsuAnimeRelationships.mediaRelationships:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 14: myservice.KitsuAnimeRelationships.characters:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 15: myservice.KitsuAnimeRelationships.staff:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 16: myservice.KitsuAnimeRelationships.productions:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 17: myservice.KitsuAnimeRelationships.quotes:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 18: myservice.KitsuAnimeRelationships.episodes:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 19: myservice.KitsuAnimeRelationships.streamingLinks:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 20: myservice.KitsuAnimeRelationships.animeProductions:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 21: myservice.KitsuAnimeRelationships.animeCharacters:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	6,  // 22: myservice.KitsuAnimeRelationships.animeStaff:type_name -> myservice.KitsuAnimeRelationKitsuAnimeItemItem
	5,  // 23: myservice.KitsuAnimeItem.links:type_name -> myservice.KitsuAnimeLinks
	4,  // 24: myservice.KitsuAnimeItem.attributes:type_name -> myservice.KitsuAnimeAttributes
	7,  // 25: myservice.KitsuAnimeItem.relationships:type_name -> myservice.KitsuAnimeRelationships
	16, // 26: myservice.KitsuAnimeListRequest.page:type_name -> myservice.KitsuAnimeListRequest.PageEntry
	0,  // 27: myservice.KitsuAnimeListResponse.contentSource:type_name -> myservice.ContentSource
	8,  // 28: myservice.KitsuAnimeListResponse.data:type_name -> myservice.KitsuAnimeItem
	0,  // 29: myservice.KitsuAnimeResponse.contentSource:type_name -> myservice.ContentSource
	8,  // 30: myservice.KitsuAnimeResponse.data:type_name -> myservice.KitsuAnimeItem
	1,  // 31: myservice.KitsuAnimeImageMeta.DimensionsEntry.value:type_name -> myservice.KitsuAnimeImageDimension
	9,  // 32: myservice.KitsuService.getAnimeList:input_type -> myservice.KitsuAnimeListRequest
	11, // 33: myservice.KitsuService.getAnime:input_type -> myservice.KitsuAnimeRequest
	10, // 34: myservice.KitsuService.getAnimeList:output_type -> myservice.KitsuAnimeListResponse
	12, // 35: myservice.KitsuService.getAnime:output_type -> myservice.KitsuAnimeResponse
	34, // [34:36] is the sub-list for method output_type
	32, // [32:34] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeImageDimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeImageMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeRelationKitsuAnimeItemItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeRelationships); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KitsuAnimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
